var documenterSearchIndex = {"docs":
[{"location":"GraphQL/#GraphQL-API","page":"GraphQL","title":"GraphQL API","text":"","category":"section"},{"location":"GraphQL/#Materials-to-read-/-watch-before-class:","page":"GraphQL","title":"Materials to read / watch before class:","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"GraphQL website\nHow to GraphQL (GraphQL Fundamentals parts 1-4)","category":"page"},{"location":"GraphQL/#Requirements","page":"GraphQL","title":"Requirements","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"If you have not, request a GitHub Personal Access Token.\nDownload GraphiQL\nSet up the GraphiQL environment through the following configuration\nGraphQL Endpoint: https://api.github.com/graphql\nHeaders:\nUser-Agent: {{Your GitHub Login}}\nAuthorization: bearer {{Your GitHub PAT}}","category":"page"},{"location":"GraphQL/#Introduction","page":"GraphQL","title":"Introduction","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"GraphQL is a query language for your API that serves as an alternative to REST. It is most suitable for data that is related (i.e., graphs) and can solve various limitations compared to REST API such as:","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Over-fetching: obtaining more data than required from a request\nUnder-fetching: need to make multiple requests to obtain the desired data\nStrong typing: allows for predictable results","category":"page"},{"location":"GraphQL/#Code-Along","page":"GraphQL","title":"Code Along","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"tip: Tip\nBe sure to check out the documentation explorer and provided hints by the GUI while learning the GraphQL language and new API.","category":"page"},{"location":"GraphQL/#Search","page":"GraphQL","title":"Search","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Using the search syntax, find the:","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Global node ID\nDate when repository was created on GitHub\nName of the default branch","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"for three repositories that meet the following criteria:","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"is a public repository\ncreated between 2021-01-01 and 2021-01-05\nis Zlib licensed","category":"page"},{"location":"GraphQL/#Solution","page":"GraphQL","title":"Solution","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"query DefaultBranch($query: String!, $type: SearchType!, $first: Int) {\n  search(query: $query, type: $type, first: $first) {\n    edges {\n      node {\n        ... on Repository {\n          id\n          defaultBranchRef {\n            name\n          }\n          createdAt\n        }\n      }\n    }\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n    \"query\": \"is:public license:zlib created:2021-01-01T00:00:00Z..2021-01-05T00:00:00Z\",\n    \"type\": \"REPOSITORY\",\n    \"first\": 3\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"which yields something like","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n  \"data\": {\n    \"search\": {\n      \"repositoryCount\": 3,\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"MDEwOlJlcG9zaXRvcnkzMjcxNDI3NDQ=\",\n            \"defaultBranchRef\": {\n              \"name\": \"main\"\n            },\n            \"createdAt\": \"2021-01-05T23:11:04Z\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"MDEwOlJlcG9zaXRvcnkzMjYyMTQ0NDM=\",\n            \"defaultBranchRef\": {\n              \"name\": \"master\"\n            },\n            \"createdAt\": \"2021-01-02T15:43:08Z\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"MDEwOlJlcG9zaXRvcnkzMjYyMzA1NTQ=\",\n            \"defaultBranchRef\": {\n              \"name\": \"master\"\n            },\n            \"createdAt\": \"2021-01-02T17:04:19Z\"\n          }\n        }\n      ]\n    }\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"warning: Warning\nPay attention to being explicit with the timezones.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"tip: Tip\nUsing variables allows to keep code DRY.","category":"page"},{"location":"GraphQL/#Primary-Language","page":"GraphQL","title":"Primary Language","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Find the programming language for the repositories above.","category":"page"},{"location":"GraphQL/#Solution-2","page":"GraphQL","title":"Solution","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"fragment PrimaryLanguage on Repository {\n  id\n  primaryLanguage {\n    name\n  }\n}\n\nquery Description($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    ...PrimaryLanguage\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n    \"ids\": [\"MDEwOlJlcG9zaXRvcnkzMjcxNDI3NDQ=\", \"MDEwOlJlcG9zaXRvcnkzMjYyMTQ0NDM=\", \"MDEwOlJlcG9zaXRvcnkzMjYyMzA1NTQ=\"]\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n  \"data\": {\n    \"nodes\": [\n      {\n        \"id\": \"MDEwOlJlcG9zaXRvcnkzMjcxNDI3NDQ=\",\n        \"primaryLanguage\": {\n          \"name\": \"C#\"\n        }\n      },\n      {\n        \"id\": \"MDEwOlJlcG9zaXRvcnkzMjYyMTQ0NDM=\",\n        \"primaryLanguage\": {\n          \"name\": \"C\"\n        }\n      },\n      {\n        \"id\": \"MDEwOlJlcG9zaXRvcnkzMjYyMzA1NTQ=\",\n        \"primaryLanguage\": {\n          \"name\": \"Python\"\n        }\n      }\n    ]\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"tip: Tip\nWhen requerying, it is best to use the global node ID.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"tip: Tip\nYou can use fragments to achieve cleaner queries.","category":"page"},{"location":"GraphQL/#Commits","page":"GraphQL","title":"Commits","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Find the first 5 user accounts of the commit authors for each commit between 2020-12-01..2021-01-01 for the repository JuliaLang/Julia and between 2020-12-14..2021-01-01 for the repository uva-bi-sdad/GHOST.jl based on the default branches.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"fragment Contributors on CommitHistoryConnection {\n  pageInfo {\n    endCursor\n    hasNextPage\n  }\n  edges {\n    node {\n      authors(first: 5) {\n        edges {\n          node {\n            user {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery CommitsOfInterest($x: GitTimestamp!, $y: GitTimestamp!, $z: GitTimestamp!, $first: Int!) {\n  _1: repository(owner: \"JuliaLang\", name: \"Julia\") {\n    ... on Repository {\n      defaultBranchRef {\n        id\n        target {\n          ... on Commit {\n            history(since: $x, until: $z, first: $first) {\n              ...Contributors\n            }\n          }\n        }\n      }\n    }\n  }\n  _2: repository(owner: \"uva-bi-sdad\", name: \"GHOST.jl\") {\n    ... on Repository {\n      defaultBranchRef {\n        id\n        target {\n          ... on Commit {\n            history(since: $y, until: $z, first: $first) {\n              ...Contributors\n            }\n          }\n        }\n      }\n    }\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n    \"x\": \"2020-12-01T00:00:00Z\",\n    \"y\": \"2020-12-14T00:00:00Z\",\n    \"z\": \"2021-01-01T00:00:00Z\",\n    \"first\": 5\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"yields","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n  \"data\": {\n    \"_1\": {\n      \"defaultBranchRef\": {\n        \"id\": \"MDM6UmVmMTY0NDE5NjpyZWZzL2hlYWRzL21hc3Rlcg==\",\n        \"target\": {\n          \"history\": {\n            \"pageInfo\": {\n              \"endCursor\": \"b4c79e76fb699cf67d0e6b14ecfa75b1aaca923f 4\",\n              \"hasNextPage\": true\n            },\n            \"edges\": [\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjEyOTE2NzE=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjEyOTE2NzE=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjEyOTE2NzE=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjgyODY0Mw==\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjEzMDkyMA==\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    },\n    \"_2\": {\n      \"defaultBranchRef\": {\n        \"id\": \"MDM6UmVmMjM4MzU3MTEyOnJlZnMvaGVhZHMvbWFpbg==\",\n        \"target\": {\n          \"history\": {\n            \"pageInfo\": {\n              \"endCursor\": \"588239801761551e5b6f5becfc7ef987adfade07 3\",\n              \"hasNextPage\": false\n            },\n            \"edges\": [\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjI1MjkzMjk=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjI1MjkzMjk=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjI1MjkzMjk=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"authors\": {\n                    \"edges\": [\n                      {\n                        \"node\": {\n                          \"user\": {\n                            \"id\": \"MDQ6VXNlcjI1MjkzMjk=\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Tips","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"tip: Tip\nAliasing allows you to reduce the number of requests needed to collect the information you want.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"info: Info\nYou can set up the structure for pagination during the initial request.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"For paginating, we can adapt the code by passing the cursors as variables.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"fragment Contributors on CommitHistoryConnection {\n  pageInfo {\n    endCursor\n  }\n  edges {\n    node {\n      authors(first: 5) {\n        edges {\n          node {\n            user {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery CommitsOfInterest($x: GitTimestamp!, $y: GitTimestamp!, $z: GitTimestamp!, $first: Int!, $x_cur: String, $y_cur: String) {\n  _1: node(id: \"MDM6UmVmMTY0NDE5NjpyZWZzL2hlYWRzL21hc3Rlcg==\") {\n    ... on Ref {\n      id\n      target {\n        ... on Commit {\n          history(since: $x, until: $z, first: $first, after: $x_cur) {\n            ...Contributors\n          }\n        }\n      }\n    }\n  }\n  _2: node(id: \"MDM6UmVmMjM4MzU3MTEyOnJlZnMvaGVhZHMvbWFpbg==\") {\n    ... on Ref {\n      id\n      target {\n        ... on Commit {\n          history(since: $y, until: $z, first: $first, after: $y_cur) {\n            ...Contributors\n          }\n        }\n      }\n    }\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n    \"x\": \"2020-12-01T00:00:00Z\",\n    \"y\": \"2020-12-14T00:00:00Z\",\n    \"z\": \"2021-01-01T00:00:00Z\",\n    \"first\": 5,\n    \"x_cur\": \"b4c79e76fb699cf67d0e6b14ecfa75b1aaca923f 4\",\n    \"y_cur\": \"588239801761551e5b6f5becfc7ef987adfade07 3\"\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"{\n  \"data\": {\n    \"_1\": {\n      \"id\": \"MDM6UmVmMTY0NDE5NjpyZWZzL2hlYWRzL21hc3Rlcg==\",\n      \"target\": {\n        \"history\": {\n          \"pageInfo\": {\n            \"endCursor\": \"b4c79e76fb699cf67d0e6b14ecfa75b1aaca923f 9\",\n            \"hasNextPage\": true\n          },\n          \"edges\": [\n            {\n              \"node\": {\n                \"authors\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"user\": {\n                          \"id\": \"MDQ6VXNlcjEzMDkyMA==\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"authors\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"user\": {\n                          \"id\": \"MDQ6VXNlcjEzMDkyMA==\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"authors\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"user\": {\n                          \"id\": \"MDQ6VXNlcjUyMjA1Mjg=\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"authors\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"user\": {\n                          \"id\": \"MDQ6VXNlcjQyMjgwNzk0\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            },\n            {\n              \"node\": {\n                \"authors\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"user\": {\n                          \"id\": \"MDQ6VXNlcjEzMDkyMA==\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    },\n    \"_2\": {\n      \"id\": \"MDM6UmVmMjM4MzU3MTEyOnJlZnMvaGVhZHMvbWFpbg==\",\n      \"target\": {\n        \"history\": {\n          \"pageInfo\": {\n            \"endCursor\": null,\n            \"hasNextPage\": false\n          },\n          \"edges\": []\n        }\n      }\n    }\n  }\n}","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"info: Info\nWhen paginating outside the range, the endCursor is null.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"info: Info\nEdges can be empty if there are no results.","category":"page"},{"location":"GraphQL/#Class-Exercise","page":"GraphQL","title":"Class Exercise","text":"","category":"section"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"Convert the pipeline from the graphical user interface to a program using your favorite GraphQL client implementations. Get familiar with programatically paginating results.","category":"page"},{"location":"GraphQL/","page":"GraphQL","title":"GraphQL","text":"tip: Tip\nUsing your favorite programming language get familiar with the available GraphQL client packages. You will likely also want to use a JSON library for reading the payload.","category":"page"},{"location":"#DS-6015-Data-from-the-Web","page":"Syllabus","title":"DS 6015 Data from the Web","text":"","category":"section"},{"location":"#Course-Information","page":"Syllabus","title":"Course Information","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"Instructor: J. Bayoán Santiago Calderón <jbs3hp@virginia.edu>\nTerm: Fall 2021\nMeets: W 14:00 - 16:30\nInstruction Mode: Online Synchronous\nRoom: Web-Based Course\nCareer: Graduate\nUnits: 3\nGrading: COVID Student Option","category":"page"},{"location":"#Description","page":"Syllabus","title":"Description","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"This course trains students in the art and science of discovering, collecting, extracting, and organizing data in the Internet. The students will learn a series of strategies to extract information in the Web such as parsing HTML, selecting CSS elements, consuming RESTful and GraphQL API, and using automated webdrivers. Students will learn how to identify the most suitable approach and ethical considerations that must be taken through a series of case studies. A final group project will expose students to developing an application for collecting, extracting, and organizing data.","category":"page"},{"location":"#Enrollment-Requirements","page":"Syllabus","title":"Enrollment Requirements","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"Students should have completed DS 5010: Programming for Data Science or a comparable course.","category":"page"},{"location":"#Course-Materials","page":"Syllabus","title":"Course Materials","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"Students are expected to have access to computing resources including access to Internet. Some material will rely on using free services such as GitHub or Twitter. Students are generally expected to be willing to create an account with these platforms in order to be eligible to use these services.","category":"page"},{"location":"#Student-Learning-Objectives","page":"Syllabus","title":"Student Learning Objectives","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"At the end of this course you will be able to:","category":"page"},{"location":"","page":"Syllabus","title":"Syllabus","text":"Perform data discovery on the Internet;\nBe proficient collecting web based data through HTML parsing, CSS selectors, REST/GraphQL API (including data as services), and using automated web drivers;\nUse complimentary techniques such as parsing PDF files and optical character recognition;\nConduct ethical evaluations of potential data collection plans and best practices; and\nDevelop a pipeline to collect, extract, organize, and store data from web sources.","category":"page"},{"location":"#Assignments-and-Grading","page":"Syllabus","title":"Assignments and Grading","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"Grades are assigned per the default thresholds for UVA.","category":"page"},{"location":"","page":"Syllabus","title":"Syllabus","text":"There will be five problem sets assigned each worth 12% of the final grade. These will be assigned a week before they are due. Late work will carry a 10% penalty for each day after the deadline. Problem sets may be revised and resubmitted for partial credit.","category":"page"},{"location":"","page":"Syllabus","title":"Syllabus","text":"A final group project which will account for 40% of the final grade. The project will be graded according to a provided rubric.","category":"page"},{"location":"#Honor-Policy","page":"Syllabus","title":"Honor Policy","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"As part of the UVA community, students are bound by the Honor Code. All work submitted for this course must be pledged:","category":"page"},{"location":"","page":"Syllabus","title":"Syllabus","text":"I have acted with honesty and integrity in producing this work and have properly communicated any knowledge of anyone who has not.","category":"page"},{"location":"#Lesson-Plan","page":"Syllabus","title":"Lesson Plan","text":"","category":"section"},{"location":"","page":"Syllabus","title":"Syllabus","text":"Date Topic Homework\nWeek 1 Data Discovery (Inventory, Screening, Acquisition) \nWeek 2 Data Ingestion (e.g., file formats) and Governance PS1\nWeek 3 REST API (Authentication, GitHub API) \nWeek 4 GraphQL API (GitHub API) PS2\nWeek 5 HTML Parser and CSS Selectors PS3\nWeek 6 WebDriver PS4\nWeek 7 Extract Text from PDF PS5\nWeek 8 Optical Character Recognition (OCR) \nWeek 9 Census, TIGERweb GeoServices, and Geocoding API \nWeek 10 Twitter and NCDC's Climate Data Online (CDO) API \nWeek 11 Developing a Wrapper and Building a Database \nWeek 12 Work on Final Project \nWeek 13 Peer Review for Final Project \nWeek 14 Final Presentations ","category":"page"}]
}
